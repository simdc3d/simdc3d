// settings General
PERIODIC_LOG_INTERVAL = 86400;											// in seconds. shorter interval requires more memory space
SKIP_x_SECONDS = 0;																// skip first ? seconds
FINISHES_AT_DAY = 0;																// stop simulator at day FINISHES_AT_DAY (in seconds)
PRINTSCREEN = false;																//			
RUN_MULTITHREAD = true;														// Run multithread
NUMBER_OF_THREADS = 9;														// Number of Threads
SEED = 12345;																			//
SUBMIT_TIME_SEC = 31526918;													//

// setting Server
NUMBER_OF_CHASSIS = 50;														// how many blade server chassis in the data center? // change SimDC3D-Constants.h
NUMBER_OF_SERVERS_IN_ONE_CHASSIS = 10;							// how many servers per blade system 
NUMBER_OF_CORES_IN_ONE_SERVER = 10;								// how many cores per servers
TOTAL_OF_MEMORY_IN_ONE_SERVER = 128000000;  				// in kbytes 
BANDWIDTH_IN_ONE_SERVER = 1000000;									// in kbits/s
CONSTANT_FAN_POWER = false;												//con true = fan rpm is constant at max
FAN_RPM_NO_LIMIT = false;														// false = Fan's max rpm to set at 3000, use true for SUPPLY_TEMPERATURE_OFFSET_ALPHA >= 0
POWER_ON = 70;																		// time to turn on the server
POWER_OFF = 30;																		// time to turn off the server
HIBERNATING_SERVER = false;													// defines whether the servers will be turned off or hibernated // true = hibernate, false = poweroff 
POWER_CONSUMPTION_HIBERNATING = 5.0;								// Power consumption in HIBERNATING (Watts)
HIBERNATING_POWER_ON = 10;												// time to remove a server into hibernation
HIBERNATING_POWER_OFF = 20;												// time for the server go into hibernation
MODEL_OF_ENERGY_CONSUMPTION = linear_model;					// Model of the energy consumption of the SERVER - "linear_model" / PowerModelSpecPower
	
// setting Virtual Machines	
MEMORY_VIRTUAL_MACHINE = 1000000,2000000,4000000;		// in kbytes
IMAGE_SIZE_VIRTUAL_MACHINE = 204800;								// in kbytes 200 Mbytes
V_TRESHOLD = 1000000;															// kbytes Calculate the downtime during the migration of a virtual machine. Extracted "Energy-Aware Cloud Management through Progressive SLA Specification".
MEMORY_DIRTYING = 100000;													// kbits Calculate the downtime during the migration of a virtual machine. Extracted "Energy-Aware Cloud Management through Progressive SLA Specification".
T_RESUME = 5;																			// seg  Calculate the downtime during the migration of a virtual machine. Extracted "Energy-Aware Cloud Management through Progressive SLA Specification".


// setting CRAC
CRAC_SUPPLY_TEMP_IS_CONSTANT_AT = 0;								// 0 = false, use dynamic crac control or enter a constant temperature 
SUPPLY_TEMPERATURE_OFFSET_ALPHA = 0;								// T_trigger = T_emergency + alpha
INSTANT_COOL_AIR_TRAVEL_TIME = false;								// true = cool air from CRAC arrives instantly to the servers
INSTANT_CHANGE_CRAC_SUPPLY_AIR = false;							// true = CRAC changes discharge air temperature instantly (e.g., from 10C to 15C or 
CRAC_DISCHARGE_CHANGE_RATE_0_00x = 10;
POLICY_OF_TEMPERATURE_CONTROL = Aggressive_Mode;		// Default, Aggressive_Mode
EMERGENCY_TEMPERATURE = 29.999;										// Emergency Temperature 

// setting scheduling Algorithm		
SCHEDULING_ALGORITHM = 3D_MULTI_OBJ_POOL;						// BEST_PERFORMANCE, UNIFORM_TASK, LOW_TEMP_FIRST, RANDOM, MIN_HR, CENTER_RACK_FIRST, 2D, 2D_POOL, 2D_POOL_AND_PREDICTION, 2D_PREDICTION, 3D_MULTI_OBJ, 3D_MULTI_OBJ_POOL, 3D_MULTI_OBJ_PREDICTION, 3D_MULTI_OBJ_POOL_AND_PREDICTION
SCHEDULING_WITH_PREDICTION = false;										// Use prediction in scheduling virtual machines
OPTIMIZATION_WITH_PREDICTION = false;									// Use prediction in the consolidation of virtual machines
PREDICTION_ALGORITHM = RBF;													// POLYNOM, RBF
VARIABLE_PREDICTED = temperature;											// Temperature		
													
SCHEDULER_2D_WEIGHT_TEMPERATURE = 0.20;							// The sum of the weights of the 3 parameters (SCHEDULER_2D_WEIGHT_TEMPERATURE, SCHEDULER_2D_WEIGHT_HEAT_RECIRCULATION and SCHEDULER_2D_WEIGHT_LOAD_CPU)  must be equal to 1 												
SCHEDULER_2D_WEIGHT_HEAT_RECIRCULATION = 0.1;					//
SCHEDULER_2D_WEIGHT_LOAD_CPU = 0.70;									//


//parameters prediction algorithm RBF and POLYNOM
SIZE_WINDOWN_PREDICTION = 1200;																//	Size Windown Prediction
MONITORINGTIME = 60;																				//  Monitoring Time in Seconds

// parameters prediction algorithm RBF 
DIM = 2;																										//-m embedding dimension [default: 2]
DELAY = 1;																									//-d delay [default: 1]
CENTER = 10;																								//-p number of centers [default: 10]
STEP = 1;																									//-s steps to forecast [default: 1]
COLUMN = 1;																								//-c column to read [default: 1]
CLENGTH = 5;																								//-L steps to cast [default: none]
MAKECAST = 1;																							// not change

//parameters prediction algorithm POLYNOM
N = 2;																										// -p order of the polynomial [default: 2]\n
CAST = 1;																									// not change
	
// setting workload
DYNAMIC_WORKLOAD_VMS = true;																		//
WORKLOAD_DISTRIBUTION_MODEL = uniform_real_distribution;    							// uniform_real_distribution

// setting migration parameters
SIMULATES_MIGRATION_VMS = true;																	//

OPTIMIZATION_ALGORITHM_LOW_UTILIZATION = 3DMOBFD;									// FFD, PABFD, 3DMOBFD, 2D_WEIGHT
PERIODIC_INTERVAL_EXECUTION_LOW = 30;														//
	
OPTIMIZATION_ALGORITHM_OVERLOAD_UTILIZATION = 3DMOBFD;							// FFD, PABFD, 3DMOBFD, 2D_WEIGHT
PERIODIC_INTERVAL_EXECUTION_OVERLOAD = 10;														//
	
OPTIMIZATION_ALGORITHM_OVERHEATING_TEMPERATURE = High_Temperature;			// High_Temperature, PABFD, 3D_MULTI_OBJ
PERIODIC_INTERVAL_EXECUTION_TEMPERATURE = 15; 												//

VMS_ALGORITHM_SELECTION = HIGHER_UTILIZATION_AVERAGE_CPU/LESS_MEMORY;			// higher_utilization_average_CPU/less_memory, higher_utilization_CPU/less_memory, higher_utilization_average_CPU/less_memory/higher_IO_network, higher_utilization_average_CPU, less_memory, higher_IO_network, random_selection 

OPTIMIZATION_ALGORITHM_LINK_OVERLOAD = DEFAULT;												// 
PERIODIC_INTERVAL_EXECUTION_LINK_OVERLOAD = 15;												//
VMS_ALGORITHM_SELECTION_OVERLOADED_LINK = higher_IO_network;							// higher_IO_network, higher_utilization_average_CPU/less_memory, higher_utilization_CPU/less_memory, higher_utilization_average_CPU/less_memory/higher_IO_network, higher_utilization_average_CPU, less_memory, random_selection 


THRESHOLD_TOP_OF_USE_CPU = 0.90;																//
THRESHOLD_BOTTOM_OF_USE_CPU = 0.30;															//

USING_PREDICTION_TO_OVERLOAD = true;															//
PREDICTION_ALGORITHM_OVERLOAD = LR;															//
SIZE_WINDOWN_PREDICTION_CPU = 60;																//

// setting network parameters
SIMULATES_NETWORK = true;												// Execute network simulation (true or false)

TYPE_TOPOLOGY = 3LAYER;											   		// 2LAYER, 3LAYER, FAT-TREE, BCUBE"
NAME_FILE_TOPOLOGY = 3camadasfull.xml;									// File name topology

NUMBER_CHASSI_RACK = 4;													// Number of Chassis on a rack. Size Chassi is 10U
NUMBER_OF_PORTS_SWITCH_ACCESS = 48;								// Number of Ports of Access Switch
NUMBER_OF_PORTS_SWITCH_AGGREGATION = 24;					// Number of Ports of Access Aggregation
NUMBER_OF_PORTS_SWITCH_CORE = 24;									// Number of Ports of Access Core

EACCE_CHASSIS = 70;															// power consumption of the chassis
EACCE_LINECARD	= 0;															// power consumption of the line card	
EACCE_PORT10 = 0.20;															// power consumption of the port 10Mbps
EACCE_PORT100 = 0.30;														// power consumption of the port 100Mbps
EACCE_PORT1000 = 0.65;														// power consumption of the port 1000Mbps
EACCE_PORT10000 = 1.30;														// power consumption of the port 10000Mbps
	
EAGGR_CHASSIS = 70;															// power consumption of the chassis
EAGGR_LINECARD = 0;															// power consumption of the line card
EAGGR_PORT10 = 0.20;														// power consumption of the port 10Mbps
EAGGR_PORT100 = 0.30;														// power consumption of the port 100Mbps
EAGGR_PORT1000 = 0.65;														// power consumption of the port 1000Mbps 
EAGGR_PORT10000 = 1.30;														// power consumption of the port 10000Mbps

ECORE_CHASSIS = 147;															// power consumption of the chassis 
ECORE_LINECARD = 38;														// power consumption of the line card
ECORE_PORT10 = 0.12;														// power consumption of the port 10 Mbps
ECORE_PORT100 = 0.18;														// power consumption of the port 100 Mbps
ECORE_PORT1000 = 0.89;														// power consumption of the port 1000 Mbps
ECORE_PORT10000 = 1.60;													// power consumption of the port 10000 Mbps

// parameters traffic matrix
SIMULATE_TRAFFIC_MATRIX = false;																	// Simulate traffic matrix (true or false)
NAME_FILE_MATRIX_TRAFFIC = /mnt/f/matriztrafego/cyclostationary48.xml;			// File name matrix traffic

CALCULATE_TRAFFIC_CORRELATION = false;
EXECUTE_LOAD_BALANCING = true;

NUMBER_NODES_TRAFFIC_MATRIX = 500;															// Number of nodes in the traffic matriz
NUMBER_OF_SAMPLES_TRAFFIC_MATRIX = 48;														// number of samples per each period
NUMBER_OF_PERIODS = 1;																					// number of periods in the Traffic Matriz
K = 3;																											// Variable K of the lognormal distribution		

SEED_PERIOD_ON = 12345;																				// Seed in the generation of the traffic period on
SEED_PERIOD_OFF = 56789;																				// Seed in the generation of the traffic period on

PROPORTION_OF_INTERNAL_COMMUNICATION_BETWEEN_VMS = 30;						// Percentage of internal communication between VMs. Note, the summation between internal and external communication must be equal to 100
PROPORTION_OF_EXTERNAL_COMMUNICATION = 70;												// Percentage of external communication 

DYNAMIC_SPEED_ADAPTATION = false;																	// Execute dynamic speed adaptation (true or false)
RUNTIME_LINK_ADAPTATION = 180;																	// Time in seconds to execute the link adaptation
TRAFFIC_LIMIT_FOR_ADAPTATION = 80;																// Determines the percentage of the traffic limit for adapting the links	

SIMULATE_TOPOLOGY_OPTIMIZATION = false;
OPTIMIZATION_ALGORITHM_TOPOLOGY = CARPO;													// Topology optimization algorithm
PERIODIC_INTERVAL_EXECUTION_TOPOLOGY = 600;												// Period of execution of the topology optimization algorithm

// setting POOL
SIMULATES_POOL_SERVER = true;																		//
SIZE_POOL = 35;																								// The initial size POOL
INCREASE_SIZE_POOL_DYNAMICALLY = false;														//

// parameters for future work
COOL_AIR_TRAVEL_TIME_MULTIPLIER = 1;
TEMPERATURE_SENSING_PERFORMANCE_CAPPING = false;
TEMPERATURE_SENSING_PERFORMANCE_CAPPING_AGGRESSIVENESS = 0;
REASSIGN_VMS = false;
	
